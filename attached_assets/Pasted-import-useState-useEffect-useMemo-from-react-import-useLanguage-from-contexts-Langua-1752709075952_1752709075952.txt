import { useState, useEffect, useMemo } from "react";
import { useLanguage } from "@/contexts/LanguageContext";
import { Search, Filter, ArrowLeft, Play, Volume2, Heart, Share, MoreVertical, TrendingUp, Users, Zap, Flame, Clock } from "lucide-react";
import SparkLogo from "@/components/spark-logo";
import SLogo from "@/components/s-logo";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useArtists } from "@/hooks/use-artists";
import { useAuth } from "@/hooks/useAuth";
import { useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";

// Interfaces
interface Artist {
  id: number;
  name: string;
  genre: string;
  country: string;
  monthlyListeners: number;
  imageUrl?: string;
  description?: string;
}

interface SearchResult {
  id: string;
  type: "artist" | "song" | "video" | "playlist";
  title: string;
  artist: string;
  thumbnail: string;
  duration?: string;
  views?: string;
  genre?: string;
  description?: string;
  verified?: boolean;
}

interface ThemeColors {
  primary: string;
  secondary: string;
  accent: string;
  gradient: string;
  overlay: string;
  text: string;
  textSecondary: string;
  background: string;
  backgroundSecondary: string;
}

export default function DynamicSearch({ userRole, artists: propArtists }: { userRole?: string; artists?: Artist[] }) {
  const { user } = useAuth();
  const { t } = useLanguage();
  const { data: artists = propArtists || [] } = useArtists(); // Utilise les artistes du hook ou les props
  const [searchQuery, setSearchQuery] = useState("");
  const [activeTab, setActiveTab] = useState("Top");
  const [isSearchFocused, setIsSearchFocused] = useState(false);

  // ThÃ¨me cyan/teal fixe
  const themeColors: ThemeColors = useMemo(() => ({
    primary: `hsl(180, 70%, 55%)`,
    secondary: `hsl(200, 60%, 45%)`,
    accent: `hsl(160, 75%, 60%)`,
    gradient: `linear-gradient(135deg, hsl(180, 70%, 55%) 0%, hsl(200, 60%, 45%) 100%)`,
    overlay: `linear-gradient(to bottom, transparent 0%, hsla(180, 30%, 10%, 0.8) 100%)`,
    text: `hsl(180, 10%, 95%)`,
    textSecondary: `hsl(180, 15%, 70%)`,
    background: `hsl(180, 20%, 8%)`,
    backgroundSecondary: `hsl(180, 25%, 12%)`,
  }), []);

  // Appliquer le thÃ¨me
  useEffect(() => {
    const root = document.documentElement;
    Object.entries(themeColors).forEach(([key, value]) =>
      root.style.setProperty(`--search-${key}`, value)
    );
  }, [themeColors]);

  // RequÃªte API pour les artistes (remplace les mocks)
  const { data: apiArtists = [] } = useQuery<Artist[]>({
    queryKey: ["/api/artists"],
    queryFn: () => apiRequest("GET", "/api/artists").then(res => res.json()),
    enabled: !!user, // Active seulement si utilisateur connectÃ©
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // GÃ©nÃ©rer des rÃ©sultats de recherche
  const generateSearchResults = (query: string): SearchResult[] => {
    if (!query.trim()) return [];
    const allArtists = [...artists, ...apiArtists];
    const results: SearchResult[] = [];

    allArtists
      .filter(artist =>
        artist.name.toLowerCase().includes(query.toLowerCase()) ||
        artist.genre.toLowerCase().includes(query.toLowerCase()) ||
        artist.country.toLowerCase().includes(query.toLowerCase())
      )
      .forEach((artist, index) => {
        results.push({
          id: `artist-${artist.id}`,
          type: "artist",
          title: artist.name,
          artist: `${artist.monthlyListeners.toLocaleString()} monthly listeners`,
          thumbnail: artist.imageUrl || `/api/placeholder/300/300`,
          genre: artist.genre,
          description: artist.description || `${artist.genre} artist from ${artist.country}`,
          verified: Math.random() > 0.5,
        });

        const songTypes = ["song", "video"] as const;
        const songTitles = ["Latest Release", "Top Hit", "New Single"];
        for (let i = 0; i < 2; i++) {
          results.push({
            id: `${songTypes[i % 2]}-${artist.id}-${i}`,
            type: songTypes[i % 2],
            title: `${songTitles[i]} ${i + 1}`,
            artist: artist.name,
            thumbnail: artist.imageUrl || `/api/placeholder/300/300`,
            duration: `${Math.floor(Math.random() * 3) + 2}:${Math.floor(Math.random() * 60).toString().padStart(2, "0")}`,
            views: `${Math.floor(Math.random() * 999)}K views`,
            genre: artist.genre,
            verified: Math.random() > 0.3,
          });
        }
      });

    return results.slice(0, 20);
  };

  const searchResults = generateSearchResults(searchQuery);
  const filteredResults = useMemo(() => {
    if (activeTab === "Top") return searchResults;
    return searchResults.filter(result => {
      switch (activeTab) {
        case "Artists": return result.type === "artist";
        case "Songs": return result.type === "song";
        case "Playlists": return result.type === "playlist";
        case "LIVE": return result.type === "video" && Math.random() > 0.7;
        case "Investment Ops":
        case "Rising Stars": return result.type === "artist" && userRole === "investor";
        case "Talent Scout":
        case "Market Data": return result.type === "artist" && userRole === "label";
        case "Collaborations":
        case "Opportunities": return result.type === "artist" && userRole === "artist";
        default: return true;
      }
    });
  }, [searchResults, activeTab, userRole]);

  // Contenu statique (Ã  remplacer par API plus tard)
  const trendingNow = [
    { id: 1, title: "Aura Farming", artist: "Young Black & Rich", plays: "2.3M", isLive: true },
    { id: 2, title: "Portuguese Vibes", artist: "Steve Aoki", plays: "1.8M", isLive: false },
  ];
  const popularSearches = [
    { term: "aura farming", count: "1.2M searches today", trending: true },
    { term: "boat kid", count: "890K searches", trending: true },
  ];
  const liveStreamers = [
    { name: "Melly Mike", viewers: "12.3K", category: "Music Production" },
    { name: "Young Black & Rich", viewers: "8.7K", category: "Live Performance" },
  ];
  const recentSearches = user ? [{ term: "young black rich", timestamp: "2 hours ago" }] : [];
  const risingArtists = [
    { name: "Luna Waves", genre: "Indie Pop", monthlyListeners: "125K", growth: "+340%" },
  ];
  const playlistSuggestions = [
    { name: "Viral Hits 2024", tracks: 47, followers: "2.1M", mood: "energetic" },
  ];

  // Filtres et tabs basÃ©s sur le rÃ´le
  const getQuickFilters = () => {
    const baseFilters = [
      { name: "Trending", color: themeColors.gradient, icon: "ðŸ”¥" },
      { name: "New", color: themeColors.gradient, icon: "âœ¨" },
    ];
    return baseFilters; // SimplifiÃ© pour lâ€™instant (Ã  personnaliser par rÃ´le plus tard)
  };

  const getRoleTabs = () => ["Top", "Artists", "Songs"]; // SimplifiÃ© pour lâ€™instant

  const getUserTypeLabel = () => (userRole || "User") + " Search";
  const getRoleAction = () => (userRole === "investor" ? "Invest" : "Follow");

  return (
    <div
      className="min-h-screen w-full relative overflow-hidden"
      style={{ background: themeColors.background, color: themeColors.text }}
    >
      <div
        className="absolute inset-0 opacity-10"
        style={{
          background: `radial-gradient(circle at 30% 20%, ${themeColors.primary} 0%, transparent 70%), radial-gradient(circle at 70% 80%, ${themeColors.secondary} 0%, transparent 70%)`,
        }}
      />

      <div className="relative z-10 p-4 flex items-center space-x-4">
        <Button variant="ghost" size="sm" className="hover:bg-white/10" style={{ color: themeColors.text }}>
          <ArrowLeft className="w-5 h-5" />
        </Button>
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5" style={{ color: themeColors.textSecondary }} />
          <Input
            placeholder="boat kid aura farming"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onFocus={() => setIsSearchFocused(true)}
            onBlur={() => setIsSearchFocused(false)}
            className="pl-12 pr-12 h-12 text-lg rounded-full border-2 transition-all duration-300"
            style={{
              backgroundColor: themeColors.backgroundSecondary,
              borderColor: isSearchFocused ? themeColors.primary : "transparent",
              color: themeColors.text,
              boxShadow: isSearchFocused ? `0 0 0 3px ${themeColors.primary}20` : "none",
            }}
          />
          {searchQuery && (
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setSearchQuery("")}
              className="absolute right-3 top-1/2 transform -translate-y-1/2 hover:bg-white/10"
            >
              âœ•
            </Button>
          )}
        </div>
        <Button variant="ghost" size="sm" className="hover:bg-white/10" style={{ color: themeColors.text }}>
          <MoreVertical className="w-5 h-5" />
        </Button>
      </div>

      <div className="relative z-10 px-4 mb-4">
        <Badge
          className="text-xs px-3 py-1"
          style={{ background: themeColors.gradient, color: themeColors.text, border: "none" }}
        >
          {getUserTypeLabel()}
        </Badge>
      </div>

      <div className="relative z-10 px-4 mb-6">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList
            className={`grid w-full h-12 p-1 rounded-full grid-cols-3 md:grid-cols-4`}
            style={{ backgroundColor: themeColors.backgroundSecondary }}
          >
            {getRoleTabs().map((tab) => (
              <TabsTrigger
                key={tab}
                value={tab}
                className="rounded-full text-xs md:text-sm font-medium transition-all duration-300 data-[state=active]:text-white"
                style={{
                  color: activeTab === tab ? themeColors.text : themeColors.textSecondary,
                  backgroundColor: activeTab === tab ? themeColors.primary : "transparent",
                }}
              >
                {tab}
              </TabsTrigger>
            ))}
          </TabsList>
        </Tabs>
      </div>

      {searchQuery && (
        <div className="relative z-10 px-4 mb-4">
          <div
            className="flex items-center justify-between p-4 rounded-lg"
            style={{ backgroundColor: themeColors.backgroundSecondary }}
          >
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 rounded-sm flex items-center justify-center" style={{ backgroundColor: themeColors.primary }}>
                <SLogo size={16} />
              </div>
              <span className="text-sm" style={{ color: themeColors.text }}>
                Ajouter Ã  une application musicale
              </span>
            </div>
            <Button variant="ghost" size="sm" className="hover:bg-white/10" style={{ color: themeColors.textSecondary }}>
              â†’
            </Button>
          </div>
        </div>
      )}

      <div className="relative z-10 px-4 pb-20">
        {!searchQuery ? (
          <div className="space-y-6">
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <Flame className="w-5 h-5" style={{ color: themeColors.accent }} />
                <h3 className="text-lg font-bold" style={{ color: themeColors.text }}>
                  Trending Now
                </h3>
              </div>
              <div className="grid grid-cols-2 gap-3">
                {trendingNow.map((item) => (
                  <div
                    key={item.id}
                    className="relative aspect-video rounded-lg overflow-hidden cursor-pointer group transition-all duration-300 hover:scale-105"
                    style={{ background: themeColors.gradient }}
                  >
                    {item.isLive && (
                      <div className="absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded-full animate-heartbeat">
                        <div className="w-2 h-2 bg-white rounded-full animate-ping" /> LIVE
                      </div>
                    )}
                    <div className="absolute top-2 right-2 bg-black/50 text-white text-xs px-2 py-1 rounded-full">
                      {item.plays}
                    </div>
                    <div className="absolute inset-0 p-3 flex flex-col justify-end">
                      <div className="space-y-1">
                        <h4 className="text-white font-bold text-sm">{item.title}</h4>
                        <p className="text-white/80 text-xs">{item.artist}</p>
                      </div>
                    </div>
                    <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                      <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <Play className="w-6 h-6 text-white ml-1" fill="white" />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        ) : filteredResults.length === 0 ? (
          <div className="text-center py-20">
            <h3 className="text-xl font-semibold mb-2" style={{ color: themeColors.text }}>
              No results found
            </h3>
            <p style={{ color: themeColors.textSecondary }}>Try searching for different keywords</p>
          </div>
        ) : (
          <div className="grid grid-cols-2 gap-2">
            {filteredResults.map((result) => (
              <div
                key={result.id}
                className="relative aspect-[9/16] rounded-lg overflow-hidden cursor-pointer group transition-all duration-300 hover:scale-[1.02]"
                style={{ background: themeColors.gradient }}
              >
                <div className="absolute inset-0">
                  <div className="absolute inset-0 animate-pulse" style={{ background: themeColors.overlay }} />
                </div>
                <div className="absolute top-3 left-3">
                  <Avatar className="w-8 h-8 border-2 border-white/50">
                    <AvatarFallback
                      className="text-white font-bold text-xs"
                      style={{ background: themeColors.accent }}
                    >
                      {result.artist[0]}
                    </AvatarFallback>
                  </Avatar>
                </div>
                <div className="absolute inset-0 p-3 flex flex-col justify-between">
                  <div className="flex justify-between items-start">
                    {result.duration && (
                      <div className="bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                        {result.duration}
                      </div>
                    )}
                    {result.verified && (
                      <div className="bg-blue-500 text-white text-xs px-2 py-1 rounded-full">
                        âœ“
                      </div>
                    )}
                  </div>
                  <div className="flex-1 flex items-center justify-center">
                    {(result.type === "video" || result.type === "song") && (
                      <div className="w-16 h-16 rounded-full bg-black/50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-300">
                        <Play className="w-8 h-8 text-white ml-1" fill="white" />
                      </div>
                    )}
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <div className="flex-1 min-w-0">
                        <h4 className="text-white font-semibold text-sm truncate">{result.title}</h4>
                        <p className="text-white/80 text-xs truncate">{result.artist}</p>
                        {result.views && <p className="text-white/60 text-xs">{result.views}</p>}
                      </div>
                      <div className="ml-2">
                        {userRole === "investor" || userRole === "label" ? (
                          <Button
                            size="sm"
                            className="text-xs h-8 px-3 rounded-full"
                            style={{ background: themeColors.accent, color: "white", border: "none" }}
                          >
                            {getRoleAction()}
                          </Button>
                        ) : (
                          <div className="flex flex-col items-center space-y-1">
                            <Button
                              variant="ghost"
                              size="sm"
                              className="w-8 h-8 rounded-full bg-white/20 hover:bg-white/30 p-0"
                            >
                              <Heart className="w-4 h-4 text-white" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="w-8 h-8 rounded-full bg-white/20 hover:bg-white/30 p-0"
                            >
                              <Share className="w-4 h-4 text-white" />
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                    {result.genre && (
                      <Badge
                        className="text-xs rounded-full"
                        style={{ backgroundColor: `${themeColors.accent}40`, color: "white", border: `1px solid ${themeColors.accent}60` }}
                      >
                        #{result.genre}
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {userRole === "artist" && (
        <div className="fixed bottom-20 right-4 z-20">
          <Button
            className="w-14 h-14 rounded-full shadow-lg"
            style={{ background: themeColors.gradient, color: themeColors.text }}
          >
            +
          </Button>
        </div>
      )}
  </div>
);